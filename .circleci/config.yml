version: 2.1

# Default configuration for persist_to_workspace and attach_workspace commands
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: ~/project

# This main executor is used by all jobs unless otherwise specified
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - name: localhost
        image: cimg/php:8.2
  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.1-node
        name: localhost
  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/base:stable
        name: localhost

jobs:
  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace

  lint-phpcs:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer and PHPCompatibility
          command: composer require --dev "squizlabs/php_codesniffer=*" "phpcompatibility/php-compatibility=*"
      - run:
          name: Run PHP_CodeSniffer with Custom Ruleset in the project root
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=phpcs-report.txt --report=checkstyle --extensions=php --ignore=vendor/ .
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              exit 0
            else
              exit $result
            fi
      - store_artifacts:
          path: phpcs-report.txt
          destination: phpcs-report

  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run local-php-security-checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report

  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PCOV
          command: |
            sudo pecl install pcov
            sudo docker-php-ext-enable pcov
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            fi
      - run:
          name: Run PHPUnit with coverage
          command: |
            XDEBUG_MODE=coverage ./vendor/bin/phpunit --coverage-clover=coverage.xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage-report
      - persist_to_workspace:
          root: .
          paths:
            - coverage.xml

  metrics-phpmetrics:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Run PHPMetrics
          command: vendor/bin/phpmetrics --report-html=./phpmetrics-report .
      - store_artifacts:
          path: phpmetrics-report
          destination: phpmetrics-report

  metrics-sonarqube:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install SonarQube Scanner
          command: |
            export SONAR_SCANNER_VERSION=6.0.0.4432
            export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
            curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
            unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
            export PATH=$SONAR_SCANNER_HOME/bin:$PATH
            export SONAR_SCANNER_OPTS="-server"
            sonar-scanner \
              -Dsonar.projectKey=php-sec-ci \
              -Dsonar.php.coverage.reportPaths=coverage.xml \
              -Dsonar.sources=src \
              -Dsonar.host.url=https://sonarqube.devops-tools.apoorva64.com

  build-docker-image:
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and Push Docker Image to GHCR (GitHub Container Registry)
          command: |
            if [ ! -z "$SKIP_BUILD" ]; then
              echo "Skipping build"
              circleci step halt
              exit 0
            fi

            # Sanitize the repository name and branch name
            REPOSITORY=$(echo "ghcr.io/startupnationlabs/php-sec-ci" | tr '[:upper:]' '[:lower:]' | tr -d '_')
            TAG=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr -cd '[:alnum:]._-' | cut -c 1-128)

            # Login to GHCR
            echo "Logging in to GHCR"
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            # Build the Docker image
            echo "Building Docker image: $REPOSITORY:$TAG"
            docker build \
              -f docker/Dockerfile \
              -t $REPOSITORY:$TAG \
              --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
              --build-arg TAG="${TAG}" \
              --build-arg GIT_COMMIT=$(git rev-parse -q --verify HEAD) \
              --build-arg GIT_URL=$(echo ${CIRCLE_REPOSITORY_URL} | sed -e 's/^git@/https:\/\//g' -e 's/\.git$//g' -e 's/:/\//g') \
              --build-arg SQLITE_VERSION=3430200 \
              --build-arg SQLITE_YEAR=2023 \
              --build-arg PROJECT_USERNAME=php-sec-ci \
              .

            # Push the Docker image
            echo "Pushing Docker image to GHCR: $REPOSITORY:$TAG"
            docker push $REPOSITORY:$TAG

  deploy-ssh-staging:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${STAGING_SSH_FINGERPRINT}"
      - deploy:
          name: Deploy to Ozeliurs Virtual Hosting
          command: |
            set -x
            ssh -o StrictHostKeyChecking=no $STAGING_SSH_USER@$STAGING_SSH_HOST \<< EOF
            PHP_FPM_VERSION=$(php -v | head -n 1 | cut -d ' ' -f 2 | cut -d '.' -f 1-2)
            cd $STAGING_DEPLOY_DIRECTORY
            git pull origin $CIRCLE_BRANCH
            composer install --optimize-autoloader --no-interaction --prefer-dist
            (flock -w 10 9 || exit 1; sudo -S service php${PHP_FPM_VERSION}-fpm restart ) 9>/tmp/fpm.lock
            EOF

  deploy-ssh-production:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${PRODUCTION_SSH_FINGERPRINT}"
      - deploy:
          name: Deploy to Production
          command: |
            set -x
            ssh -o StrictHostKeyChecking=no $PRODUCTION_SSH_USER@$PRODUCTION_SSH_HOST \<< EOF
            PHP_FPM_VERSION=$(php -v | head -n 1 | cut -d ' ' -f 2 | cut -d '.' -f 1-2)
            cd $PRODUCTION_DEPLOY_DIRECTORY
            git pull origin $CIRCLE_BRANCH
            composer install --optimize-autoloader --no-interaction --prefer-dist
            (flock -w 10 9 || exit 1; sudo -S service php\${PHP_FPM_VERSION}-fpm restart ) 9>/tmp/fpm.lock
            EOF

workflows:
  main_workflow:
    jobs:
      - build-setup
      - lint-phpcs:
          requires:
            - build-setup
      - security-check-dependencies:
          requires:
            - build-setup
      - test-phpunit:
          requires:
            - build-setup
      - metrics-sonarqube:
          requires:
            - test-phpunit
      - metrics-phpmetrics:
          requires:
            - build-setup
      - hold:
          type: approval
          requires:
            - lint-phpcs
            - security-check-dependencies
            - test-phpunit
            - metrics-phpmetrics
            - metrics-sonarqube
          filters:
            branches:
              only:
                - main
                - master
                - /^release\/.*/
      - deploy-ssh-production:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
                - master
      - deploy-ssh-staging:
          requires:
            - hold
          filters:
            branches:
              only:
                - /^release\/.*/

  container_workflow:
    jobs:
      - build-docker-image:
          filters:
            branches:
              only:
                - master
                - main
                - develop
                - /^feature\/.*/
                - /^release\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/
